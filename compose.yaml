services:
    tupik:
        image: tupik
        restart: on-failure
        depends_on: 
            db:
                condition: "service_healthy"
                required: True
        ports:
            - ${POSTGRES_PORT}:5432
    db:
        image: postgres
        restart: always
        environment:
            POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
            POSTGRES_USER: '${POSTGRES_USER}'
            POSTGRES_DB: '${POSTGRES_DB}'
            PGDATA: '/var/lib/postgresql/data/pgdata'

        volumes:
            - pg-data:/var/lib/postgresql/data/pgdata
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}", "-W", "${POSTGRES_DB}"]
            interval: 10s
            retries: 5
            start_period: 30s
            timeout: 10s

    adminer:
        image: adminer
        restart: always
        ports:
            - 8080:8080
    dagster_app:
        build:
            context: .
            dockerfile: dagster_app/Dockerfile
        restart: unless-stopped
        environment:
            DATASET_DIR: /app/data/home_credit
        volumes:
            - ./dagster_app:/app
        ports:
            - 3000:3000

volumes:
    pg-data:

"""Job responsible for generating synthetic LLM alerts."""

from __future__ import annotations

from typing import Sequence

from dagster import In, Nothing, Out, job, op

from ..ops import load_dataset_op
from ..utils.alerts import LlmAlert, generate_random_llm_alerts
from ..utils.persistence import persist_llm_alerts


@op(ins={"dataset": In(dict)}, out=Out(list))
def generate_llm_alerts_op(context, dataset):  # type: ignore[no-untyped-def]
    """Generate synthetic alerts leveraging dataset context."""

    context.log.info("Generating synthetic LLM alerts")
    alerts = generate_random_llm_alerts(dataset, count=5)
    context.log.info("Generated %d alerts", len(alerts))
    return alerts


@op(ins={"alerts": In(list)}, out=Out(Nothing))
def persist_llm_alerts_op(context, alerts: Sequence[LlmAlert]):
    """Persist generated alerts into PostgreSQL."""

    result = persist_llm_alerts(alerts)
    context.log.info(
        "Persisted %d alerts for data source '%s' (id=%s)",
        result.alerts_created,
        result.data_source_name,
        result.data_source_id,
    )
    if result.replaced_alerts:
        context.log.info(
            "Replaced %d existing alerts previously generated by llm_pipeline",
            result.replaced_alerts,
        )


@job(name="llm_pipeline")
def llm_pipeline():
    alerts = generate_llm_alerts_op(load_dataset_op())
    persist_llm_alerts_op(alerts)
